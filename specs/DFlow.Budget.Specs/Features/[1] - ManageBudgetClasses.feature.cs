// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFlow.Budget.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Feature_1_ManageBudgetClassesFeature : Xunit.IClassFixture<Feature_1_ManageBudgetClassesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "[1] - ManageBudgetClasses.feature"
#line hidden
        
        public Feature_1_ManageBudgetClassesFeature(Feature_1_ManageBudgetClassesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature - 1 - ManageBudgetClasses", "    As a master user\r\n    I need to manage budget classes\r\n    To keep control of" +
                    " my budget", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Scenario - 1.1 - Add budget classes")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature - 1 - ManageBudgetClasses")]
        [Xunit.TraitAttribute("Description", "Scenario - 1.1 - Add budget classes")]
        public virtual void Scenario_1_1_AddBudgetClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario - 1.1 - Add budget classes", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("we are working with a new scenario tenant context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table1.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
            table1.AddRow(new string[] {
                        "Housing",
                        "2",
                        "Expense"});
            table1.AddRow(new string[] {
                        "Food",
                        "3",
                        "Expense"});
            table1.AddRow(new string[] {
                        "Transportation",
                        "4",
                        "Expense"});
            table1.AddRow(new string[] {
                        "Entertainment",
                        "5",
                        "Expense"});
#line 10
    testRunner.When("I add budget classes:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table2.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
            table2.AddRow(new string[] {
                        "Housing",
                        "2",
                        "Expense"});
            table2.AddRow(new string[] {
                        "Food",
                        "3",
                        "Expense"});
            table2.AddRow(new string[] {
                        "Transportation",
                        "4",
                        "Expense"});
            table2.AddRow(new string[] {
                        "Entertainment",
                        "5",
                        "Expense"});
#line 18
    testRunner.Then("I get the following budget classes", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Scenario - 1.2 - Avoid duplicate name in budget classes")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature - 1 - ManageBudgetClasses")]
        [Xunit.TraitAttribute("Description", "Scenario - 1.2 - Avoid duplicate name in budget classes")]
        public virtual void Scenario_1_2_AvoidDuplicateNameInBudgetClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario - 1.2 - Avoid duplicate name in budget classes", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 29
    testRunner.Given("we are working with a new scenario tenant context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table3.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
#line 31
    testRunner.And("I\'ve added budget classes:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table4.AddRow(new string[] {
                        "Income",
                        "2",
                        "Expense"});
#line 35
    testRunner.Then("I can\'t duplicate budget class names:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Scenario - 1.3 - Modify budget classes")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature - 1 - ManageBudgetClasses")]
        [Xunit.TraitAttribute("Description", "Scenario - 1.3 - Modify budget classes")]
        public virtual void Scenario_1_3_ModifyBudgetClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario - 1.3 - Modify budget classes", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 42
    testRunner.Given("we are working with a new scenario tenant context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table5.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
            table5.AddRow(new string[] {
                        "Housing",
                        "2",
                        "Expense"});
            table5.AddRow(new string[] {
                        "Food",
                        "3",
                        "Expense"});
#line 44
    testRunner.And("I\'ve added budget classes:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindName",
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table6.AddRow(new string[] {
                        "Income",
                        "Income - Updated",
                        "1",
                        "Income"});
            table6.AddRow(new string[] {
                        "Housing",
                        "Housing - Update SortOrder",
                        "3",
                        "Expense"});
            table6.AddRow(new string[] {
                        "Food",
                        "Food - Update Type",
                        "3",
                        "Investment"});
#line 50
    testRunner.When("I modify the original budget classes:", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table7.AddRow(new string[] {
                        "Income - Updated",
                        "1",
                        "Income"});
            table7.AddRow(new string[] {
                        "Housing - Update SortOrder",
                        "3",
                        "Expense"});
            table7.AddRow(new string[] {
                        "Food - Update Type",
                        "3",
                        "Investment"});
#line 56
    testRunner.Then("I get the following budget classes", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Scenario - 1.4 - Remove budget classes")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature - 1 - ManageBudgetClasses")]
        [Xunit.TraitAttribute("Description", "Scenario - 1.4 - Remove budget classes")]
        public virtual void Scenario_1_4_RemoveBudgetClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario - 1.4 - Remove budget classes", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 65
    testRunner.Given("we are working with a new scenario tenant context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table8.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
            table8.AddRow(new string[] {
                        "Housing",
                        "2",
                        "Expense"});
            table8.AddRow(new string[] {
                        "Food",
                        "3",
                        "Expense"});
#line 67
    testRunner.And("I\'ve added budget classes:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "FindName"});
            table9.AddRow(new string[] {
                        "Housing"});
#line 73
    testRunner.When("I delete the original budget classes:", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table10.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
            table10.AddRow(new string[] {
                        "Food",
                        "3",
                        "Expense"});
#line 77
    testRunner.Then("I get the following budget classes", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Scenario - 1.5 - Add budget items")]
        [Xunit.TraitAttribute("FeatureTitle", "Feature - 1 - ManageBudgetClasses")]
        [Xunit.TraitAttribute("Description", "Scenario - 1.5 - Add budget items")]
        public virtual void Scenario_1_5_AddBudgetItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scenario - 1.5 - Add budget items", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 84
    testRunner.Given("we are working with a new scenario tenant context", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "TransactionType"});
            table11.AddRow(new string[] {
                        "Income",
                        "1",
                        "Income"});
            table11.AddRow(new string[] {
                        "Housing",
                        "2",
                        "Expense"});
            table11.AddRow(new string[] {
                        "Food",
                        "3",
                        "Expense"});
#line 86
    testRunner.And("I\'ve added budget classes:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "BudgetClass",
                        "Name",
                        "SortOrder",
                        "BaseAmount"});
            table12.AddRow(new string[] {
                        "Income",
                        "Job",
                        "1",
                        "3000"});
            table12.AddRow(new string[] {
                        "Housing",
                        "Rent",
                        "1",
                        "1000"});
            table12.AddRow(new string[] {
                        "Housing",
                        "Phone",
                        "2",
                        "62"});
            table12.AddRow(new string[] {
                        "Housing",
                        "Electricity",
                        "3",
                        "44"});
            table12.AddRow(new string[] {
                        "Housing",
                        "Water",
                        "4",
                        "8"});
#line 92
    testRunner.When("I add the following budget items:", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "SortOrder",
                        "BaseAmount",
                        "Percent"});
            table13.AddRow(new string[] {
                        "Rent",
                        "1",
                        "1000",
                        "89,77"});
            table13.AddRow(new string[] {
                        "Phone",
                        "2",
                        "62",
                        "5,57"});
            table13.AddRow(new string[] {
                        "Electricity",
                        "3",
                        "44",
                        "3,95"});
            table13.AddRow(new string[] {
                        "Water",
                        "4",
                        "8",
                        "0,72"});
#line 100
    testRunner.Then("I get the following budget items for class \"Housing\":", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Feature_1_ManageBudgetClassesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Feature_1_ManageBudgetClassesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
